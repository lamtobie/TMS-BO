// <auto-generated />
using System;
using Databases;
using Databases.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace TMS_FinalProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Databases.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BlockAddress")
                        .HasColumnType("text")
                        .HasColumnName("block_address");

                    b.Property<string>("ClusterAddress")
                        .HasColumnType("text")
                        .HasColumnName("cluster_address");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<decimal>("Lat")
                        .HasColumnType("numeric")
                        .HasColumnName("lat");

                    b.Property<decimal>("Long")
                        .HasColumnType("numeric")
                        .HasColumnName("long");

                    b.Property<string>("QuarterAddress")
                        .HasColumnType("text")
                        .HasColumnName("quarter_address");

                    b.Property<string>("SlicCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slic_code");

                    b.Property<string>("SlicDistrict")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slic_district");

                    b.Property<string>("SlicLabel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slic_label");

                    b.Property<string>("SlicLevel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slic_level");

                    b.Property<string>("SlicProvince")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slic_province");

                    b.Property<string>("SlicRegion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slic_region");

                    b.Property<string>("SlicWard")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slic_ward");

                    b.Property<string>("SubQuarterAddress")
                        .HasColumnType("text")
                        .HasColumnName("sub_quarter_address");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("Databases.Entities.DataAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data_type");

                    b.Property<string>("DataValue")
                        .HasColumnType("text")
                        .HasColumnName("data_value");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameEN")
                        .HasColumnType("text")
                        .HasColumnName("name_en");

                    b.Property<string>("NameVI")
                        .HasColumnType("text")
                        .HasColumnName("name_vi");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("data_attribute", (string)null);
                });

            modelBuilder.Entity("Databases.Entities.DeliveryOrder", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<long?>("ActualArrivalTime")
                        .HasColumnType("bigint")
                        .HasColumnName("actual_arrival_time");

                    b.Property<long?>("ActualStartTime")
                        .HasColumnType("bigint")
                        .HasColumnName("actual_start_time");

                    b.Property<long?>("ActualTimeConsumed")
                        .HasColumnType("bigint")
                        .HasColumnName("actual_time_consumed");

                    b.Property<DataAttribute[]>("Additional")
                        .HasColumnType("jsonb")
                        .HasColumnName("additional");

                    b.Property<bool?>("CODReceived")
                        .HasColumnType("boolean")
                        .HasColumnName("cod_received");

                    b.Property<bool?>("CodAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("cod_allowed");

                    b.Property<float?>("CodAmount")
                        .HasColumnType("real")
                        .HasColumnName("cod_amount");

                    b.Property<string>("CodMethod")
                        .HasColumnType("text")
                        .HasColumnName("cod_method");

                    b.Property<string>("CoordinatorCode")
                        .HasColumnType("text")
                        .HasColumnName("coordinator_code");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<int?>("DeliveryRouteSegmentId")
                        .HasColumnType("integer")
                        .HasColumnName("delivery_route_segment_id");

                    b.Property<string>("DriverCode")
                        .HasColumnType("text")
                        .HasColumnName("driver_code");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<Guid?>("EndAddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("end_address_id");

                    b.Property<string>("EndContactPerson")
                        .HasColumnType("text")
                        .HasColumnName("end_contact_person");

                    b.Property<string>("EndContactPhone")
                        .HasColumnType("text")
                        .HasColumnName("end_contact_phone");

                    b.Property<string>("EndNote")
                        .HasColumnType("text")
                        .HasColumnName("end_note");

                    b.Property<string>("EndStationCode")
                        .HasColumnType("text")
                        .HasColumnName("end_station_code");

                    b.Property<string>("Evidence")
                        .HasColumnType("text")
                        .HasColumnName("evidence");

                    b.Property<long?>("ExpectedArrivalTime")
                        .HasColumnType("bigint")
                        .HasColumnName("expected_arrival_time");

                    b.Property<long?>("ExpectedStartTime")
                        .HasColumnType("bigint")
                        .HasColumnName("expected_start_time");

                    b.Property<long?>("ExpectedTimeConsumed")
                        .HasColumnType("bigint")
                        .HasColumnName("expected_time_consumed");

                    b.Property<string>("GroupCode")
                        .HasColumnType("text")
                        .HasColumnName("group_code");

                    b.Property<bool?>("IsToCustomer")
                        .HasColumnType("boolean")
                        .HasColumnName("is_to_customer");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int?>("NumberOfTransit")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_transit");

                    b.Property<string>("ParentCode")
                        .HasColumnType("text")
                        .HasColumnName("parent_code");

                    b.Property<string>("ProductType")
                        .HasColumnType("text")
                        .HasColumnName("product_type");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<string>("ReferenceCode")
                        .HasColumnType("text")
                        .HasColumnName("reference_code");

                    b.Property<string>("ReturnAddress")
                        .HasColumnType("text")
                        .HasColumnName("return_address");

                    b.Property<string>("SessionCode")
                        .HasColumnType("text")
                        .HasColumnName("session_code");

                    b.Property<string>("SourceBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("TMS Client")
                        .HasColumnName("source_by");

                    b.Property<Guid?>("StartAddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("start_address_id");

                    b.Property<string>("StartContactPerson")
                        .HasColumnType("text")
                        .HasColumnName("start_contact_person");

                    b.Property<string>("StartContactPhone")
                        .HasColumnType("text")
                        .HasColumnName("start_contact_phone");

                    b.Property<string>("StartNote")
                        .HasColumnType("text")
                        .HasColumnName("start_note");

                    b.Property<string>("StartStationCode")
                        .HasColumnType("text")
                        .HasColumnName("start_station_code");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Draft")
                        .HasColumnName("status");

                    b.Property<string>("ThreePLTeam")
                        .HasColumnType("text")
                        .HasColumnName("threepl_team");

                    b.Property<float?>("TotalItems")
                        .HasColumnType("real")
                        .HasColumnName("total_items");

                    b.Property<int?>("TransitOrder")
                        .HasColumnType("integer")
                        .HasColumnName("transit_order");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<int?>("Weight")
                        .HasColumnType("integer")
                        .HasColumnName("weight");

                    b.HasKey("Code");

                    b.HasIndex("CoordinatorCode");

                    b.HasIndex("DriverCode");

                    b.HasIndex("EndAddressId");

                    b.HasIndex("GroupCode");

                    b.HasIndex("ParentCode");

                    b.HasIndex("SessionCode");

                    b.HasIndex("StartAddressId");

                    b.ToTable("delivery_order", (string)null);
                });

            modelBuilder.Entity("Databases.Entities.DeliveryOrderGroup", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("CancelReason")
                        .HasColumnType("text")
                        .HasColumnName("cancel_reason");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Code");

                    b.ToTable("delivery_order_group", (string)null);
                });

            modelBuilder.Entity("Databases.Entities.DeliveryOrderLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("DeliveryOrderCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("delivery_order_code");

                    b.Property<string>("DeliveryPackageCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("delivery_package_code");

                    b.Property<int?>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<int?>("Length")
                        .HasColumnType("integer")
                        .HasColumnName("length");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Draft")
                        .HasColumnName("status");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<int?>("Weight")
                        .HasColumnType("integer")
                        .HasColumnName("weight");

                    b.Property<int?>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryOrderCode");

                    b.HasIndex("DeliveryPackageCode");

                    b.ToTable("delivery_order_line", (string)null);
                });

            modelBuilder.Entity("Databases.Entities.DeliveryPackage", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("DeliveryPackageGroupCode")
                        .HasColumnType("text");

                    b.Property<string>("ExternalCode")
                        .HasColumnType("text")
                        .HasColumnName("external_code");

                    b.Property<string>("ExternalSOCode")
                        .HasColumnType("text")
                        .HasColumnName("external_so_code");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Draft")
                        .HasColumnName("status");

                    b.Property<string>("Uom")
                        .HasColumnType("text")
                        .HasColumnName("uom");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Code");

                    b.HasIndex("DeliveryPackageGroupCode");

                    b.ToTable("delivery_package", (string)null);
                });

            modelBuilder.Entity("Databases.Entities.DeliveryPackageGroup", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("DeliveryOrderCode")
                        .HasColumnType("text")
                        .HasColumnName("delivery_order_code");

                    b.Property<string>("ParentCode")
                        .HasColumnType("text")
                        .HasColumnName("parent_code");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Draft")
                        .HasColumnName("status");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Code");

                    b.HasIndex("DeliveryOrderCode");

                    b.HasIndex("ParentCode");

                    b.ToTable("delivery_package_group", (string)null);
                });

            modelBuilder.Entity("Databases.Entities.DeliveryRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActualArrivalTime")
                        .HasColumnType("integer")
                        .HasColumnName("actual_arrival_time");

                    b.Property<int?>("ActualStartTime")
                        .HasColumnType("integer")
                        .HasColumnName("actual_start_time");

                    b.Property<int?>("ActualTimeConsumed")
                        .HasColumnType("integer")
                        .HasColumnName("actual_time_consumed");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("DriverCode")
                        .HasColumnType("text")
                        .HasColumnName("driver_code");

                    b.Property<string>("EndStationId")
                        .HasColumnType("text")
                        .HasColumnName("snd_station_id");

                    b.Property<int?>("ExpectedArrivalTime")
                        .HasColumnType("integer")
                        .HasColumnName("expected_arrival_time");

                    b.Property<int?>("ExpectedStartTime")
                        .HasColumnType("integer")
                        .HasColumnName("expected_start_time");

                    b.Property<int?>("ExpectedTimeConsumed")
                        .HasColumnType("integer")
                        .HasColumnName("expected_time_consumed");

                    b.Property<float?>("Length")
                        .HasColumnType("real")
                        .HasColumnName("length");

                    b.Property<short?>("Order")
                        .HasColumnType("smallint")
                        .HasColumnName("order");

                    b.Property<string>("StartStationId")
                        .HasColumnType("text")
                        .HasColumnName("start_station_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Draft")
                        .HasColumnName("status");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("DriverCode");

                    b.HasIndex("EndStationId");

                    b.HasIndex("StartStationId");

                    b.ToTable("delivery_route", (string)null);
                });

            modelBuilder.Entity("Databases.Entities.DeliveryRouteSegment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActualArrivalTime")
                        .HasColumnType("integer")
                        .HasColumnName("actual_arrival_time");

                    b.Property<int?>("ActualStartTime")
                        .HasColumnType("integer")
                        .HasColumnName("actual_start_time");

                    b.Property<int?>("ActualTimeConsumed")
                        .HasColumnType("integer")
                        .HasColumnName("actual_time_consumed");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<int>("DeliveryRouteId")
                        .HasColumnType("integer")
                        .HasColumnName("delivery_route_id");

                    b.Property<string>("DriverCode")
                        .HasColumnType("text")
                        .HasColumnName("driver_code");

                    b.Property<string>("EndStationId")
                        .HasColumnType("text")
                        .HasColumnName("snd_station_id");

                    b.Property<int?>("ExpectedArrivalTime")
                        .HasColumnType("integer")
                        .HasColumnName("expected_arrival_time");

                    b.Property<int?>("ExpectedStartTime")
                        .HasColumnType("integer")
                        .HasColumnName("expected_start_time");

                    b.Property<int?>("ExpectedTimeConsumed")
                        .HasColumnType("integer")
                        .HasColumnName("expected_time_consumed");

                    b.Property<float?>("Length")
                        .HasColumnType("real")
                        .HasColumnName("length");

                    b.Property<short?>("Order")
                        .HasColumnType("smallint")
                        .HasColumnName("order");

                    b.Property<string>("StartStationId")
                        .HasColumnType("text")
                        .HasColumnName("start_station_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Draft")
                        .HasColumnName("status");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryRouteId");

                    b.HasIndex("DriverCode");

                    b.HasIndex("EndStationId");

                    b.HasIndex("StartStationId");

                    b.ToTable("delivery_route_segment", (string)null);
                });

            modelBuilder.Entity("Databases.Entities.DeliverySession", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("CoordinatorCode")
                        .HasColumnType("text")
                        .HasColumnName("coordinator_code");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("DriverCode")
                        .HasColumnType("text")
                        .HasColumnName("driver_code");

                    b.Property<string>("EndStationCode")
                        .HasColumnType("text")
                        .HasColumnName("end_station_code");

                    b.Property<string>("Evidence")
                        .HasColumnType("text")
                        .HasColumnName("evidence");

                    b.Property<string>("Excepted")
                        .HasColumnType("text")
                        .HasColumnName("excepted");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<string>("ParentCode")
                        .HasColumnType("text")
                        .HasColumnName("parent_code");

                    b.Property<string>("ReasonCancel")
                        .HasColumnType("text")
                        .HasColumnName("reason_cancel");

                    b.Property<string>("ReasonReject")
                        .HasColumnType("text")
                        .HasColumnName("reason_reject");

                    b.Property<string>("SessionGroupCode")
                        .HasColumnType("text")
                        .HasColumnName("session_group_code");

                    b.Property<string>("SessionType")
                        .HasColumnType("text")
                        .HasColumnName("session_type");

                    b.Property<string>("StartStationCode")
                        .HasColumnType("text")
                        .HasColumnName("start_station_code");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Draft")
                        .HasColumnName("status");

                    b.Property<bool?>("ToCustomer")
                        .HasColumnType("boolean")
                        .HasColumnName("to_customer");

                    b.Property<int?>("TotalReceivedItems")
                        .HasColumnType("integer")
                        .HasColumnName("total_received_items");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<string>("VehicleCode")
                        .HasColumnType("text")
                        .HasColumnName("vehicle_code");

                    b.HasKey("Code");

                    b.HasIndex("CoordinatorCode");

                    b.HasIndex("DriverCode");

                    b.HasIndex("EndStationCode");

                    b.HasIndex("ParentCode");

                    b.HasIndex("SessionGroupCode");

                    b.HasIndex("StartStationCode");

                    b.HasIndex("VehicleCode");

                    b.ToTable("delivery_session", (string)null);
                });

            modelBuilder.Entity("Databases.Entities.DeliverySessionGroup", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Code");

                    b.ToTable("delivery_session_group", (string)null);
                });

            modelBuilder.Entity("Databases.Entities.DeliverySessionLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<long?>("ConsumedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("consumed_at");

                    b.Property<string>("ConsumedBy")
                        .HasColumnType("text")
                        .HasColumnName("consumed_by");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("DeliveryOrderChildrenCode")
                        .HasColumnType("text");

                    b.Property<string>("DeliveryOrderCode")
                        .HasColumnType("text")
                        .HasColumnName("delivery_order_code");

                    b.Property<string>("DeliveryOrderGroupCode")
                        .HasColumnType("text")
                        .HasColumnName("delivery_order_group_code");

                    b.Property<string>("DeliveryOrderParentCode")
                        .HasColumnType("text")
                        .HasColumnName("delivery_order_parent_code");

                    b.Property<string>("DeliveryPackageCode")
                        .HasColumnType("text")
                        .HasColumnName("delivery_package_code");

                    b.Property<string>("DeliveryPackageGroupCode")
                        .HasColumnType("text")
                        .HasColumnName("delivery_package_group_code");

                    b.Property<string>("DeliverySessionCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("delivery_session_code");

                    b.Property<string>("ReferenceCode")
                        .HasColumnType("text")
                        .HasColumnName("reference_code");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Draft")
                        .HasColumnName("status");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("DeliverySessionCode");

                    b.ToTable("delivery_session_line", (string)null);
                });

            modelBuilder.Entity("Databases.Entities.Employee", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<string>("AvatarPicture")
                        .HasColumnType("text")
                        .HasColumnName("avatar_picture");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("DrivingLicensePicture")
                        .HasColumnType("text")
                        .HasColumnName("driving_license_picture");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("EmployeeType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("employee_type");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fullname");

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("text")
                        .HasColumnName("identity_number");

                    b.Property<string>("IdentityNumberPicture")
                        .HasColumnType("text")
                        .HasColumnName("identity_number_picture");

                    b.Property<bool?>("IsStationAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_station_admin");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mobile_phone");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("StationCode")
                        .HasColumnType("text")
                        .HasColumnName("station_code");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Draft")
                        .HasColumnName("status");

                    b.Property<string>("ThreePLTeam")
                        .HasColumnType("text")
                        .HasColumnName("threepl_team");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Code");

                    b.HasIndex("AddressId");

                    b.HasIndex("StationCode");

                    b.ToTable("employee", (string)null);
                });

            modelBuilder.Entity("Databases.Entities.Station", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactEmailAnother")
                        .HasColumnType("text")
                        .HasColumnName("contact_email_another");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contact_person");

                    b.Property<string>("ContactPersonAnother")
                        .HasColumnType("text")
                        .HasColumnName("contact_person_another");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contact_phone");

                    b.Property<string>("ContactPhoneAnother")
                        .HasColumnType("text")
                        .HasColumnName("contact_phone_another");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Draft")
                        .HasColumnName("status");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Code");

                    b.HasIndex("AddressId");

                    b.ToTable("station", (string)null);
                });

            modelBuilder.Entity("Databases.Entities.Vehicle", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("NumberPlate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number_plate");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("free")
                        .HasColumnName("status");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<string>("VehicleTypeCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vehicle_type_code");

                    b.HasKey("Code");

                    b.HasIndex("VehicleTypeCode");

                    b.ToTable("vehicle", (string)null);
                });

            modelBuilder.Entity("Databases.Entities.VehicleType", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<float?>("Height")
                        .HasColumnType("real")
                        .HasColumnName("height");

                    b.Property<float?>("Length")
                        .HasColumnType("real")
                        .HasColumnName("length");

                    b.Property<float?>("MaximumCapacity")
                        .HasColumnType("real")
                        .HasColumnName("maximum_capacity");

                    b.Property<float?>("MaximumPayload")
                        .HasColumnType("real")
                        .HasColumnName("maximum_payload");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Active")
                        .HasColumnName("status");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<float?>("Width")
                        .HasColumnType("real")
                        .HasColumnName("width");

                    b.HasKey("Code");

                    b.ToTable("vehicle_type", (string)null);
                });

            modelBuilder.Entity("Databases.Entities.DeliveryOrder", b =>
                {
                    b.HasOne("Databases.Entities.Employee", "Coordinator")
                        .WithMany()
                        .HasForeignKey("CoordinatorCode");

                    b.HasOne("Databases.Entities.Employee", "Driver")
                        .WithMany("DeliveryOrders")
                        .HasForeignKey("DriverCode");

                    b.HasOne("Databases.Entities.Address", "EndAddress")
                        .WithMany("DeliveryOrderEndAddress")
                        .HasForeignKey("EndAddressId");

                    b.HasOne("Databases.Entities.DeliveryOrderGroup", "DeliveryOrderGroup")
                        .WithMany("DeliveryOrders")
                        .HasForeignKey("GroupCode");

                    b.HasOne("Databases.Entities.DeliveryOrder", "Parent")
                        .WithMany("Childrens")
                        .HasForeignKey("ParentCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Databases.Entities.DeliverySession", "Session")
                        .WithMany("DeliveryOrders")
                        .HasForeignKey("SessionCode");

                    b.HasOne("Databases.Entities.Address", "StartAddress")
                        .WithMany("DeliveryOrderStartAddress")
                        .HasForeignKey("StartAddressId");

                    b.Navigation("Coordinator");

                    b.Navigation("DeliveryOrderGroup");

                    b.Navigation("Driver");

                    b.Navigation("EndAddress");

                    b.Navigation("Parent");

                    b.Navigation("Session");

                    b.Navigation("StartAddress");
                });

            modelBuilder.Entity("Databases.Entities.DeliveryOrderLine", b =>
                {
                    b.HasOne("Databases.Entities.DeliveryOrder", "DeliveryOrder")
                        .WithMany("DeliveryOrderLines")
                        .HasForeignKey("DeliveryOrderCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Databases.Entities.DeliveryPackage", "DeliveryPackage")
                        .WithMany("DeliveryOrderLines")
                        .HasForeignKey("DeliveryPackageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryOrder");

                    b.Navigation("DeliveryPackage");
                });

            modelBuilder.Entity("Databases.Entities.DeliveryPackage", b =>
                {
                    b.HasOne("Databases.Entities.DeliveryPackageGroup", null)
                        .WithMany("DeliveryPackages")
                        .HasForeignKey("DeliveryPackageGroupCode");
                });

            modelBuilder.Entity("Databases.Entities.DeliveryPackageGroup", b =>
                {
                    b.HasOne("Databases.Entities.DeliveryOrder", "DeliveryOrder")
                        .WithMany()
                        .HasForeignKey("DeliveryOrderCode");

                    b.HasOne("Databases.Entities.DeliveryPackageGroup", "Parent")
                        .WithMany("Childrens")
                        .HasForeignKey("ParentCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryOrder");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Databases.Entities.DeliveryRoute", b =>
                {
                    b.HasOne("Databases.Entities.Employee", "Driver")
                        .WithMany("DeliveryRoutes")
                        .HasForeignKey("DriverCode");

                    b.HasOne("Databases.Entities.Station", "EndStation")
                        .WithMany("EndDeliveryRoutes")
                        .HasForeignKey("EndStationId");

                    b.HasOne("Databases.Entities.Station", "StartStation")
                        .WithMany("StartDeliveryRoutes")
                        .HasForeignKey("StartStationId");

                    b.Navigation("Driver");

                    b.Navigation("EndStation");

                    b.Navigation("StartStation");
                });

            modelBuilder.Entity("Databases.Entities.DeliveryRouteSegment", b =>
                {
                    b.HasOne("Databases.Entities.DeliveryRoute", "DeliveryRoute")
                        .WithMany("DeliveryRouteSegments")
                        .HasForeignKey("DeliveryRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Databases.Entities.Employee", "Driver")
                        .WithMany("DeliveryRouteSegments")
                        .HasForeignKey("DriverCode");

                    b.HasOne("Databases.Entities.Station", "EndStation")
                        .WithMany("EndDeliveryRouteSegments")
                        .HasForeignKey("EndStationId");

                    b.HasOne("Databases.Entities.Station", "StartStation")
                        .WithMany("StartDeliveryRouteSegments")
                        .HasForeignKey("StartStationId");

                    b.Navigation("DeliveryRoute");

                    b.Navigation("Driver");

                    b.Navigation("EndStation");

                    b.Navigation("StartStation");
                });

            modelBuilder.Entity("Databases.Entities.DeliverySession", b =>
                {
                    b.HasOne("Databases.Entities.Employee", "Coordinator")
                        .WithMany("CoordinatorDeliverySessions")
                        .HasForeignKey("CoordinatorCode");

                    b.HasOne("Databases.Entities.Employee", "Driver")
                        .WithMany("DriverDeliverySessions")
                        .HasForeignKey("DriverCode");

                    b.HasOne("Databases.Entities.Station", "EndStation")
                        .WithMany("EndDeliverySessions")
                        .HasForeignKey("EndStationCode");

                    b.HasOne("Databases.Entities.DeliverySession", "Parent")
                        .WithMany("Childrens")
                        .HasForeignKey("ParentCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Databases.Entities.DeliverySessionGroup", "SessionGroup")
                        .WithMany("Sessions")
                        .HasForeignKey("SessionGroupCode");

                    b.HasOne("Databases.Entities.Station", "StartStation")
                        .WithMany("StartDeliverySessions")
                        .HasForeignKey("StartStationCode");

                    b.HasOne("Databases.Entities.Vehicle", "Vehicle")
                        .WithMany("DeliverySessions")
                        .HasForeignKey("VehicleCode");

                    b.Navigation("Coordinator");

                    b.Navigation("Driver");

                    b.Navigation("EndStation");

                    b.Navigation("Parent");

                    b.Navigation("SessionGroup");

                    b.Navigation("StartStation");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Databases.Entities.DeliverySessionLine", b =>
                {
                    b.HasOne("Databases.Entities.DeliverySession", "DeliverySession")
                        .WithMany("DeliverySessionLines")
                        .HasForeignKey("DeliverySessionCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliverySession");
                });

            modelBuilder.Entity("Databases.Entities.Employee", b =>
                {
                    b.HasOne("Databases.Entities.Address", "Address")
                        .WithMany("Employees")
                        .HasForeignKey("AddressId");

                    b.HasOne("Databases.Entities.Station", "Station")
                        .WithMany("Employees")
                        .HasForeignKey("StationCode");

                    b.Navigation("Address");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Databases.Entities.Station", b =>
                {
                    b.HasOne("Databases.Entities.Address", "Address")
                        .WithMany("Stations")
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Databases.Entities.Vehicle", b =>
                {
                    b.HasOne("Databases.Entities.VehicleType", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Databases.Entities.Address", b =>
                {
                    b.Navigation("DeliveryOrderEndAddress");

                    b.Navigation("DeliveryOrderStartAddress");

                    b.Navigation("Employees");

                    b.Navigation("Stations");
                });

            modelBuilder.Entity("Databases.Entities.DeliveryOrder", b =>
                {
                    b.Navigation("Childrens");

                    b.Navigation("DeliveryOrderLines");
                });

            modelBuilder.Entity("Databases.Entities.DeliveryOrderGroup", b =>
                {
                    b.Navigation("DeliveryOrders");
                });

            modelBuilder.Entity("Databases.Entities.DeliveryPackage", b =>
                {
                    b.Navigation("DeliveryOrderLines");
                });

            modelBuilder.Entity("Databases.Entities.DeliveryPackageGroup", b =>
                {
                    b.Navigation("Childrens");

                    b.Navigation("DeliveryPackages");
                });

            modelBuilder.Entity("Databases.Entities.DeliveryRoute", b =>
                {
                    b.Navigation("DeliveryRouteSegments");
                });

            modelBuilder.Entity("Databases.Entities.DeliverySession", b =>
                {
                    b.Navigation("Childrens");

                    b.Navigation("DeliveryOrders");

                    b.Navigation("DeliverySessionLines");
                });

            modelBuilder.Entity("Databases.Entities.DeliverySessionGroup", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Databases.Entities.Employee", b =>
                {
                    b.Navigation("CoordinatorDeliverySessions");

                    b.Navigation("DeliveryOrders");

                    b.Navigation("DeliveryRouteSegments");

                    b.Navigation("DeliveryRoutes");

                    b.Navigation("DriverDeliverySessions");
                });

            modelBuilder.Entity("Databases.Entities.Station", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("EndDeliveryRouteSegments");

                    b.Navigation("EndDeliveryRoutes");

                    b.Navigation("EndDeliverySessions");

                    b.Navigation("StartDeliveryRouteSegments");

                    b.Navigation("StartDeliveryRoutes");

                    b.Navigation("StartDeliverySessions");
                });

            modelBuilder.Entity("Databases.Entities.Vehicle", b =>
                {
                    b.Navigation("DeliverySessions");
                });

            modelBuilder.Entity("Databases.Entities.VehicleType", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
